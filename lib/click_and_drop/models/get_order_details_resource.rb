=begin
#ChannelShipper & Royal Mail Public API

#Import your orders, retrieve your orders and generate labels.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module ClickAndDrop
  class GetOrderDetailsResource
    attr_accessor :order_identifier

    attr_accessor :order_status

    attr_accessor :created_on

    attr_accessor :printed_on

    attr_accessor :shipped_on

    attr_accessor :postage_applied_on

    attr_accessor :manifested_on

    attr_accessor :order_date

    attr_accessor :despatched_by_other_courier_on

    attr_accessor :trading_name

    attr_accessor :channel

    attr_accessor :marketplace_type_name

    attr_accessor :department

    attr_accessor :air_number

    attr_accessor :requires_export_license

    attr_accessor :commercial_invoice_number

    attr_accessor :commercial_invoice_date

    attr_accessor :order_reference

    attr_accessor :channel_shipping_method

    attr_accessor :special_instructions

    attr_accessor :picker_special_instructions

    attr_accessor :subtotal

    attr_accessor :shipping_cost_charged

    attr_accessor :order_discount

    attr_accessor :total

    attr_accessor :weight_in_grams

    attr_accessor :package_size

    attr_accessor :account_batch_number

    attr_accessor :currency_code

    attr_accessor :shipping_details

    attr_accessor :shipping_info

    attr_accessor :billing_info

    attr_accessor :order_lines

    attr_accessor :tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_identifier' => :'orderIdentifier',
        :'order_status' => :'orderStatus',
        :'created_on' => :'createdOn',
        :'printed_on' => :'printedOn',
        :'shipped_on' => :'shippedOn',
        :'postage_applied_on' => :'postageAppliedOn',
        :'manifested_on' => :'manifestedOn',
        :'order_date' => :'orderDate',
        :'despatched_by_other_courier_on' => :'despatchedByOtherCourierOn',
        :'trading_name' => :'tradingName',
        :'channel' => :'channel',
        :'marketplace_type_name' => :'marketplaceTypeName',
        :'department' => :'department',
        :'air_number' => :'AIRNumber',
        :'requires_export_license' => :'requiresExportLicense',
        :'commercial_invoice_number' => :'commercialInvoiceNumber',
        :'commercial_invoice_date' => :'commercialInvoiceDate',
        :'order_reference' => :'orderReference',
        :'channel_shipping_method' => :'channelShippingMethod',
        :'special_instructions' => :'specialInstructions',
        :'picker_special_instructions' => :'pickerSpecialInstructions',
        :'subtotal' => :'subtotal',
        :'shipping_cost_charged' => :'shippingCostCharged',
        :'order_discount' => :'orderDiscount',
        :'total' => :'total',
        :'weight_in_grams' => :'weightInGrams',
        :'package_size' => :'packageSize',
        :'account_batch_number' => :'accountBatchNumber',
        :'currency_code' => :'currencyCode',
        :'shipping_details' => :'shippingDetails',
        :'shipping_info' => :'shippingInfo',
        :'billing_info' => :'billingInfo',
        :'order_lines' => :'orderLines',
        :'tags' => :'tags'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'order_identifier' => :'Integer',
        :'order_status' => :'String',
        :'created_on' => :'Time',
        :'printed_on' => :'Time',
        :'shipped_on' => :'Time',
        :'postage_applied_on' => :'Time',
        :'manifested_on' => :'Time',
        :'order_date' => :'Time',
        :'despatched_by_other_courier_on' => :'Time',
        :'trading_name' => :'String',
        :'channel' => :'String',
        :'marketplace_type_name' => :'String',
        :'department' => :'String',
        :'air_number' => :'String',
        :'requires_export_license' => :'Boolean',
        :'commercial_invoice_number' => :'String',
        :'commercial_invoice_date' => :'Time',
        :'order_reference' => :'String',
        :'channel_shipping_method' => :'String',
        :'special_instructions' => :'String',
        :'picker_special_instructions' => :'String',
        :'subtotal' => :'Float',
        :'shipping_cost_charged' => :'Float',
        :'order_discount' => :'Float',
        :'total' => :'Float',
        :'weight_in_grams' => :'Integer',
        :'package_size' => :'String',
        :'account_batch_number' => :'String',
        :'currency_code' => :'String',
        :'shipping_details' => :'GetShippingDetailsResult',
        :'shipping_info' => :'GetPostalDetailsResult',
        :'billing_info' => :'GetPostalDetailsResult',
        :'order_lines' => :'Array<GetOrderLineResult>',
        :'tags' => :'Array<GetTagDetailsResult>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ClickAndDrop::GetOrderDetailsResource` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ClickAndDrop::GetOrderDetailsResource`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'order_identifier')
        self.order_identifier = attributes[:'order_identifier']
      end

      if attributes.key?(:'order_status')
        self.order_status = attributes[:'order_status']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'printed_on')
        self.printed_on = attributes[:'printed_on']
      end

      if attributes.key?(:'shipped_on')
        self.shipped_on = attributes[:'shipped_on']
      end

      if attributes.key?(:'postage_applied_on')
        self.postage_applied_on = attributes[:'postage_applied_on']
      end

      if attributes.key?(:'manifested_on')
        self.manifested_on = attributes[:'manifested_on']
      end

      if attributes.key?(:'order_date')
        self.order_date = attributes[:'order_date']
      end

      if attributes.key?(:'despatched_by_other_courier_on')
        self.despatched_by_other_courier_on = attributes[:'despatched_by_other_courier_on']
      end

      if attributes.key?(:'trading_name')
        self.trading_name = attributes[:'trading_name']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'marketplace_type_name')
        self.marketplace_type_name = attributes[:'marketplace_type_name']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'air_number')
        self.air_number = attributes[:'air_number']
      end

      if attributes.key?(:'requires_export_license')
        self.requires_export_license = attributes[:'requires_export_license']
      end

      if attributes.key?(:'commercial_invoice_number')
        self.commercial_invoice_number = attributes[:'commercial_invoice_number']
      end

      if attributes.key?(:'commercial_invoice_date')
        self.commercial_invoice_date = attributes[:'commercial_invoice_date']
      end

      if attributes.key?(:'order_reference')
        self.order_reference = attributes[:'order_reference']
      end

      if attributes.key?(:'channel_shipping_method')
        self.channel_shipping_method = attributes[:'channel_shipping_method']
      end

      if attributes.key?(:'special_instructions')
        self.special_instructions = attributes[:'special_instructions']
      end

      if attributes.key?(:'picker_special_instructions')
        self.picker_special_instructions = attributes[:'picker_special_instructions']
      end

      if attributes.key?(:'subtotal')
        self.subtotal = attributes[:'subtotal']
      end

      if attributes.key?(:'shipping_cost_charged')
        self.shipping_cost_charged = attributes[:'shipping_cost_charged']
      end

      if attributes.key?(:'order_discount')
        self.order_discount = attributes[:'order_discount']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'weight_in_grams')
        self.weight_in_grams = attributes[:'weight_in_grams']
      end

      if attributes.key?(:'package_size')
        self.package_size = attributes[:'package_size']
      end

      if attributes.key?(:'account_batch_number')
        self.account_batch_number = attributes[:'account_batch_number']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'shipping_details')
        self.shipping_details = attributes[:'shipping_details']
      end

      if attributes.key?(:'shipping_info')
        self.shipping_info = attributes[:'shipping_info']
      end

      if attributes.key?(:'billing_info')
        self.billing_info = attributes[:'billing_info']
      end

      if attributes.key?(:'order_lines')
        if (value = attributes[:'order_lines']).is_a?(Array)
          self.order_lines = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @subtotal.nil?
        invalid_properties.push('invalid value for "subtotal", subtotal cannot be nil.')
      end

      if @shipping_cost_charged.nil?
        invalid_properties.push('invalid value for "shipping_cost_charged", shipping_cost_charged cannot be nil.')
      end

      if @order_discount.nil?
        invalid_properties.push('invalid value for "order_discount", order_discount cannot be nil.')
      end

      if @total.nil?
        invalid_properties.push('invalid value for "total", total cannot be nil.')
      end

      if @weight_in_grams.nil?
        invalid_properties.push('invalid value for "weight_in_grams", weight_in_grams cannot be nil.')
      end

      if !@currency_code.nil? && @currency_code.to_s.length > 3
        invalid_properties.push('invalid value for "currency_code", the character length must be smaller than or equal to 3.')
      end

      if @shipping_details.nil?
        invalid_properties.push('invalid value for "shipping_details", shipping_details cannot be nil.')
      end

      if @shipping_info.nil?
        invalid_properties.push('invalid value for "shipping_info", shipping_info cannot be nil.')
      end

      if @billing_info.nil?
        invalid_properties.push('invalid value for "billing_info", billing_info cannot be nil.')
      end

      if @order_lines.nil?
        invalid_properties.push('invalid value for "order_lines", order_lines cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @subtotal.nil?
      return false if @shipping_cost_charged.nil?
      return false if @order_discount.nil?
      return false if @total.nil?
      return false if @weight_in_grams.nil?
      return false if !@currency_code.nil? && @currency_code.to_s.length > 3
      return false if @shipping_details.nil?
      return false if @shipping_info.nil?
      return false if @billing_info.nil?
      return false if @order_lines.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_code Value to be assigned
    def currency_code=(currency_code)
      if !currency_code.nil? && currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "currency_code", the character length must be smaller than or equal to 3.'
      end

      @currency_code = currency_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_identifier == o.order_identifier &&
          order_status == o.order_status &&
          created_on == o.created_on &&
          printed_on == o.printed_on &&
          shipped_on == o.shipped_on &&
          postage_applied_on == o.postage_applied_on &&
          manifested_on == o.manifested_on &&
          order_date == o.order_date &&
          despatched_by_other_courier_on == o.despatched_by_other_courier_on &&
          trading_name == o.trading_name &&
          channel == o.channel &&
          marketplace_type_name == o.marketplace_type_name &&
          department == o.department &&
          air_number == o.air_number &&
          requires_export_license == o.requires_export_license &&
          commercial_invoice_number == o.commercial_invoice_number &&
          commercial_invoice_date == o.commercial_invoice_date &&
          order_reference == o.order_reference &&
          channel_shipping_method == o.channel_shipping_method &&
          special_instructions == o.special_instructions &&
          picker_special_instructions == o.picker_special_instructions &&
          subtotal == o.subtotal &&
          shipping_cost_charged == o.shipping_cost_charged &&
          order_discount == o.order_discount &&
          total == o.total &&
          weight_in_grams == o.weight_in_grams &&
          package_size == o.package_size &&
          account_batch_number == o.account_batch_number &&
          currency_code == o.currency_code &&
          shipping_details == o.shipping_details &&
          shipping_info == o.shipping_info &&
          billing_info == o.billing_info &&
          order_lines == o.order_lines &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [order_identifier, order_status, created_on, printed_on, shipped_on, postage_applied_on, manifested_on, order_date, despatched_by_other_courier_on, trading_name, channel, marketplace_type_name, department, air_number, requires_export_license, commercial_invoice_number, commercial_invoice_date, order_reference, channel_shipping_method, special_instructions, picker_special_instructions, subtotal, shipping_cost_charged, order_discount, total, weight_in_grams, package_size, account_batch_number, currency_code, shipping_details, shipping_info, billing_info, order_lines, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ClickAndDrop.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
