=begin
#ChannelShipper & Royal Mail Public API

#Import your orders, retrieve your orders and generate labels.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module ClickAndDrop
  class PostageDetailsRequest
    attr_accessor :send_notifications_to

    attr_accessor :service_code

    attr_accessor :service_register_code

    attr_accessor :consequential_loss

    attr_accessor :receive_email_notification

    attr_accessor :receive_sms_notification

    attr_accessor :guaranteed_saturday_delivery

    attr_accessor :request_signature_upon_delivery

    attr_accessor :is_local_collect

    attr_accessor :safe_place

    attr_accessor :department

    attr_accessor :air_number

    attr_accessor :ioss_number

    attr_accessor :requires_export_license

    attr_accessor :commercial_invoice_number

    attr_accessor :commercial_invoice_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'send_notifications_to' => :'sendNotificationsTo',
        :'service_code' => :'serviceCode',
        :'service_register_code' => :'serviceRegisterCode',
        :'consequential_loss' => :'consequentialLoss',
        :'receive_email_notification' => :'receiveEmailNotification',
        :'receive_sms_notification' => :'receiveSmsNotification',
        :'guaranteed_saturday_delivery' => :'guaranteedSaturdayDelivery',
        :'request_signature_upon_delivery' => :'requestSignatureUponDelivery',
        :'is_local_collect' => :'isLocalCollect',
        :'safe_place' => :'safePlace',
        :'department' => :'department',
        :'air_number' => :'AIRNumber',
        :'ioss_number' => :'IOSSNumber',
        :'requires_export_license' => :'requiresExportLicense',
        :'commercial_invoice_number' => :'commercialInvoiceNumber',
        :'commercial_invoice_date' => :'commercialInvoiceDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'send_notifications_to' => :'String',
        :'service_code' => :'String',
        :'service_register_code' => :'String',
        :'consequential_loss' => :'Integer',
        :'receive_email_notification' => :'Boolean',
        :'receive_sms_notification' => :'Boolean',
        :'guaranteed_saturday_delivery' => :'Boolean',
        :'request_signature_upon_delivery' => :'Boolean',
        :'is_local_collect' => :'Boolean',
        :'safe_place' => :'String',
        :'department' => :'String',
        :'air_number' => :'String',
        :'ioss_number' => :'String',
        :'requires_export_license' => :'Boolean',
        :'commercial_invoice_number' => :'String',
        :'commercial_invoice_date' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ClickAndDrop::PostageDetailsRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ClickAndDrop::PostageDetailsRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'send_notifications_to')
        self.send_notifications_to = attributes[:'send_notifications_to']
      end

      if attributes.key?(:'service_code')
        self.service_code = attributes[:'service_code']
      end

      if attributes.key?(:'service_register_code')
        self.service_register_code = attributes[:'service_register_code']
      end

      if attributes.key?(:'consequential_loss')
        self.consequential_loss = attributes[:'consequential_loss']
      end

      if attributes.key?(:'receive_email_notification')
        self.receive_email_notification = attributes[:'receive_email_notification']
      end

      if attributes.key?(:'receive_sms_notification')
        self.receive_sms_notification = attributes[:'receive_sms_notification']
      end

      if attributes.key?(:'guaranteed_saturday_delivery')
        self.guaranteed_saturday_delivery = attributes[:'guaranteed_saturday_delivery']
      end

      if attributes.key?(:'request_signature_upon_delivery')
        self.request_signature_upon_delivery = attributes[:'request_signature_upon_delivery']
      end

      if attributes.key?(:'is_local_collect')
        self.is_local_collect = attributes[:'is_local_collect']
      end

      if attributes.key?(:'safe_place')
        self.safe_place = attributes[:'safe_place']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'air_number')
        self.air_number = attributes[:'air_number']
      end

      if attributes.key?(:'ioss_number')
        self.ioss_number = attributes[:'ioss_number']
      end

      if attributes.key?(:'requires_export_license')
        self.requires_export_license = attributes[:'requires_export_license']
      end

      if attributes.key?(:'commercial_invoice_number')
        self.commercial_invoice_number = attributes[:'commercial_invoice_number']
      end

      if attributes.key?(:'commercial_invoice_date')
        self.commercial_invoice_date = attributes[:'commercial_invoice_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@service_code.nil? && @service_code.to_s.length > 10
        invalid_properties.push('invalid value for "service_code", the character length must be smaller than or equal to 10.')
      end

      if !@service_register_code.nil? && @service_register_code.to_s.length > 2
        invalid_properties.push('invalid value for "service_register_code", the character length must be smaller than or equal to 2.')
      end

      if !@consequential_loss.nil? && @consequential_loss > 10000
        invalid_properties.push('invalid value for "consequential_loss", must be smaller than or equal to 10000.')
      end

      if !@consequential_loss.nil? && @consequential_loss < 0
        invalid_properties.push('invalid value for "consequential_loss", must be greater than or equal to 0.')
      end

      if !@safe_place.nil? && @safe_place.to_s.length > 90
        invalid_properties.push('invalid value for "safe_place", the character length must be smaller than or equal to 90.')
      end

      if !@department.nil? && @department.to_s.length > 150
        invalid_properties.push('invalid value for "department", the character length must be smaller than or equal to 150.')
      end

      if !@air_number.nil? && @air_number.to_s.length > 50
        invalid_properties.push('invalid value for "air_number", the character length must be smaller than or equal to 50.')
      end

      if !@ioss_number.nil? && @ioss_number.to_s.length > 50
        invalid_properties.push('invalid value for "ioss_number", the character length must be smaller than or equal to 50.')
      end

      if !@commercial_invoice_number.nil? && @commercial_invoice_number.to_s.length > 35
        invalid_properties.push('invalid value for "commercial_invoice_number", the character length must be smaller than or equal to 35.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      send_notifications_to_validator = EnumAttributeValidator.new('String', ["sender", "recipient", "billing"])
      return false unless send_notifications_to_validator.valid?(@send_notifications_to)
      return false if !@service_code.nil? && @service_code.to_s.length > 10
      return false if !@service_register_code.nil? && @service_register_code.to_s.length > 2
      return false if !@consequential_loss.nil? && @consequential_loss > 10000
      return false if !@consequential_loss.nil? && @consequential_loss < 0
      return false if !@safe_place.nil? && @safe_place.to_s.length > 90
      return false if !@department.nil? && @department.to_s.length > 150
      return false if !@air_number.nil? && @air_number.to_s.length > 50
      return false if !@ioss_number.nil? && @ioss_number.to_s.length > 50
      return false if !@commercial_invoice_number.nil? && @commercial_invoice_number.to_s.length > 35
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] send_notifications_to Object to be assigned
    def send_notifications_to=(send_notifications_to)
      validator = EnumAttributeValidator.new('String', ["sender", "recipient", "billing"])
      unless validator.valid?(send_notifications_to)
        fail ArgumentError, "invalid value for \"send_notifications_to\", must be one of #{validator.allowable_values}."
      end
      @send_notifications_to = send_notifications_to
    end

    # Custom attribute writer method with validation
    # @param [Object] service_code Value to be assigned
    def service_code=(service_code)
      if !service_code.nil? && service_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "service_code", the character length must be smaller than or equal to 10.'
      end

      @service_code = service_code
    end

    # Custom attribute writer method with validation
    # @param [Object] service_register_code Value to be assigned
    def service_register_code=(service_register_code)
      if !service_register_code.nil? && service_register_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "service_register_code", the character length must be smaller than or equal to 2.'
      end

      @service_register_code = service_register_code
    end

    # Custom attribute writer method with validation
    # @param [Object] consequential_loss Value to be assigned
    def consequential_loss=(consequential_loss)
      if !consequential_loss.nil? && consequential_loss > 10000
        fail ArgumentError, 'invalid value for "consequential_loss", must be smaller than or equal to 10000.'
      end

      if !consequential_loss.nil? && consequential_loss < 0
        fail ArgumentError, 'invalid value for "consequential_loss", must be greater than or equal to 0.'
      end

      @consequential_loss = consequential_loss
    end

    # Custom attribute writer method with validation
    # @param [Object] safe_place Value to be assigned
    def safe_place=(safe_place)
      if !safe_place.nil? && safe_place.to_s.length > 90
        fail ArgumentError, 'invalid value for "safe_place", the character length must be smaller than or equal to 90.'
      end

      @safe_place = safe_place
    end

    # Custom attribute writer method with validation
    # @param [Object] department Value to be assigned
    def department=(department)
      if !department.nil? && department.to_s.length > 150
        fail ArgumentError, 'invalid value for "department", the character length must be smaller than or equal to 150.'
      end

      @department = department
    end

    # Custom attribute writer method with validation
    # @param [Object] air_number Value to be assigned
    def air_number=(air_number)
      if !air_number.nil? && air_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "air_number", the character length must be smaller than or equal to 50.'
      end

      @air_number = air_number
    end

    # Custom attribute writer method with validation
    # @param [Object] ioss_number Value to be assigned
    def ioss_number=(ioss_number)
      if !ioss_number.nil? && ioss_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "ioss_number", the character length must be smaller than or equal to 50.'
      end

      @ioss_number = ioss_number
    end

    # Custom attribute writer method with validation
    # @param [Object] commercial_invoice_number Value to be assigned
    def commercial_invoice_number=(commercial_invoice_number)
      if !commercial_invoice_number.nil? && commercial_invoice_number.to_s.length > 35
        fail ArgumentError, 'invalid value for "commercial_invoice_number", the character length must be smaller than or equal to 35.'
      end

      @commercial_invoice_number = commercial_invoice_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          send_notifications_to == o.send_notifications_to &&
          service_code == o.service_code &&
          service_register_code == o.service_register_code &&
          consequential_loss == o.consequential_loss &&
          receive_email_notification == o.receive_email_notification &&
          receive_sms_notification == o.receive_sms_notification &&
          guaranteed_saturday_delivery == o.guaranteed_saturday_delivery &&
          request_signature_upon_delivery == o.request_signature_upon_delivery &&
          is_local_collect == o.is_local_collect &&
          safe_place == o.safe_place &&
          department == o.department &&
          air_number == o.air_number &&
          ioss_number == o.ioss_number &&
          requires_export_license == o.requires_export_license &&
          commercial_invoice_number == o.commercial_invoice_number &&
          commercial_invoice_date == o.commercial_invoice_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [send_notifications_to, service_code, service_register_code, consequential_loss, receive_email_notification, receive_sms_notification, guaranteed_saturday_delivery, request_signature_upon_delivery, is_local_collect, safe_place, department, air_number, ioss_number, requires_export_license, commercial_invoice_number, commercial_invoice_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ClickAndDrop.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
