=begin
#ChannelShipper & Royal Mail Public API

#Import your orders, retrieve your orders and generate labels.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module ClickAndDrop
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create orders
    # @param request [CreateOrdersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateOrdersResponse]
    def create_orders_async(request, opts = {})
      data, _status_code, _headers = create_orders_async_with_http_info(request, opts)
      data
    end

    # Create orders
    # @param request [CreateOrdersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrdersResponse, Integer, Hash)>] CreateOrdersResponse data, response status code and response headers
    def create_orders_async_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.create_orders_async ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling OrdersApi.create_orders_async"
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrdersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.create_orders_async",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#create_orders_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete orders
    # <b>Reserved for ChannelShipper customers only - please visit  <a href=\"https://channelshipper.com/\" target=\"_self\">ChannelShipper.com</a> for more information</b>  Please be aware labels generated on orders which are deleted are no longer valid and must be destroyed.  Cancelled label information is automatically shared with Royal Mail Revenue Protection, and should  a cancelled label be identified on an item in the Royal Mail Network, you will be charged on your account  and an additional handling fee applied. 
    # @param order_identifiers [String] One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.
    # @param [Hash] opts the optional parameters
    # @return [DeleteOrdersResource]
    def delete_orders_async(order_identifiers, opts = {})
      data, _status_code, _headers = delete_orders_async_with_http_info(order_identifiers, opts)
      data
    end

    # Delete orders
    # &lt;b&gt;Reserved for ChannelShipper customers only - please visit  &lt;a href&#x3D;\&quot;https://channelshipper.com/\&quot; target&#x3D;\&quot;_self\&quot;&gt;ChannelShipper.com&lt;/a&gt; for more information&lt;/b&gt;  Please be aware labels generated on orders which are deleted are no longer valid and must be destroyed.  Cancelled label information is automatically shared with Royal Mail Revenue Protection, and should  a cancelled label be identified on an item in the Royal Mail Network, you will be charged on your account  and an additional handling fee applied. 
    # @param order_identifiers [String] One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteOrdersResource, Integer, Hash)>] DeleteOrdersResource data, response status code and response headers
    def delete_orders_async_with_http_info(order_identifiers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.delete_orders_async ...'
      end
      # verify the required parameter 'order_identifiers' is set
      if @api_client.config.client_side_validation && order_identifiers.nil?
        fail ArgumentError, "Missing the required parameter 'order_identifiers' when calling OrdersApi.delete_orders_async"
      end
      # resource path
      local_var_path = '/orders/{orderIdentifiers}'.sub('{' + 'orderIdentifiers' + '}', CGI.escape(order_identifiers.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteOrdersResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.delete_orders_async",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#delete_orders_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve orders
    # @param order_identifiers [String] One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetOrderInfoResource>]
    def get_orders_async(order_identifiers, opts = {})
      data, _status_code, _headers = get_orders_async_with_http_info(order_identifiers, opts)
      data
    end

    # Retrieve orders
    # @param order_identifiers [String] One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetOrderInfoResource>, Integer, Hash)>] Array<GetOrderInfoResource> data, response status code and response headers
    def get_orders_async_with_http_info(order_identifiers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.get_orders_async ...'
      end
      # verify the required parameter 'order_identifiers' is set
      if @api_client.config.client_side_validation && order_identifiers.nil?
        fail ArgumentError, "Missing the required parameter 'order_identifiers' when calling OrdersApi.get_orders_async"
      end
      # resource path
      local_var_path = '/orders/{orderIdentifiers}'.sub('{' + 'orderIdentifiers' + '}', CGI.escape(order_identifiers.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetOrderInfoResource>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.get_orders_async",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#get_orders_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve orders details
    # <b>Reserved for ChannelShipper customers only - please visit <a href=\"https://channelshipper.com/\" target=\"_self\">ChannelShipper.com</a> for more information</b>
    # @param order_identifiers [String] One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetOrderDetailsResource>]
    def get_orders_with_details_async(order_identifiers, opts = {})
      data, _status_code, _headers = get_orders_with_details_async_with_http_info(order_identifiers, opts)
      data
    end

    # Retrieve orders details
    # &lt;b&gt;Reserved for ChannelShipper customers only - please visit &lt;a href&#x3D;\&quot;https://channelshipper.com/\&quot; target&#x3D;\&quot;_self\&quot;&gt;ChannelShipper.com&lt;/a&gt; for more information&lt;/b&gt;
    # @param order_identifiers [String] One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetOrderDetailsResource>, Integer, Hash)>] Array<GetOrderDetailsResource> data, response status code and response headers
    def get_orders_with_details_async_with_http_info(order_identifiers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.get_orders_with_details_async ...'
      end
      # verify the required parameter 'order_identifiers' is set
      if @api_client.config.client_side_validation && order_identifiers.nil?
        fail ArgumentError, "Missing the required parameter 'order_identifiers' when calling OrdersApi.get_orders_with_details_async"
      end
      # resource path
      local_var_path = '/orders/{orderIdentifiers}/full'.sub('{' + 'orderIdentifiers' + '}', CGI.escape(order_identifiers.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetOrderDetailsResource>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.get_orders_with_details_async",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#get_orders_with_details_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set order status
    # @param request [UpdateOrdersStatusRequest] At least one of &#39;orderIdentifier&#39; and &#39;orderReference&#39; is required. Providing both is disallowed to avoid ambiguity.  When the status is set to &#39;despatchedByOtherCourier&#39;, if the optional parameter &#39;trackingNumber&#39; is provided  then the parameters &#39;despatchDate&#39;, &#39;shippingCarrier&#39; and &#39;shippingService&#39; are also required. 
    # @param [Hash] opts the optional parameters
    # @return [UpdateOrderStatusResponse]
    def update_orders_status_async(request, opts = {})
      data, _status_code, _headers = update_orders_status_async_with_http_info(request, opts)
      data
    end

    # Set order status
    # @param request [UpdateOrdersStatusRequest] At least one of &#39;orderIdentifier&#39; and &#39;orderReference&#39; is required. Providing both is disallowed to avoid ambiguity.  When the status is set to &#39;despatchedByOtherCourier&#39;, if the optional parameter &#39;trackingNumber&#39; is provided  then the parameters &#39;despatchDate&#39;, &#39;shippingCarrier&#39; and &#39;shippingService&#39; are also required. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateOrderStatusResponse, Integer, Hash)>] UpdateOrderStatusResponse data, response status code and response headers
    def update_orders_status_async_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.update_orders_status_async ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling OrdersApi.update_orders_status_async"
      end
      # resource path
      local_var_path = '/orders/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrderStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.update_orders_status_async",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#update_orders_status_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
